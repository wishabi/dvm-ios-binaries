// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name dvm_sdk
import Combine
import CoreLocation
import Foundation
import OSLog
import Swift
import UIKit.UIDevice
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import dvm_sdk
import os
public struct Offer : Swift.Codable {
  public let globalID: Swift.String?
  public let merchantID: Swift.Int?
  public let products: [dvm_sdk.Product]?
  public let productIDS: [Swift.String]?
  public let distributionContext: [Swift.String : dvm_sdk.StringList]?
  public let dates: dvm_sdk.Dates?
  public let pricing: dvm_sdk.Pricing?
  public let categories: dvm_sdk.Categories?
  public let metadata: dvm_sdk.Metadata?
  public let offerDetails: dvm_sdk.OfferDetails?
  public let details: dvm_sdk.Details?
  public let contentSource: Swift.String?
  public let integrations: [dvm_sdk.Integration]?
  public let legacyIDS: dvm_sdk.OfferLegacyIDS?
  public let language: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PriceRange : Swift.Codable {
  public let from: Swift.Double
  public let to: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias PublicationsListCompletion = (dvm_sdk.PublicationsList) -> Swift.Void
@_hasMissingDesignatedInitializers public class DVMSDK {
  public static func initialize(clientToken: Swift.String, userId: Swift.String?, enableLongTap: Swift.Bool = false, longTapMinimumPressDuration: Foundation.TimeInterval? = nil)
  public static func updateUserId(_ userId: Swift.String)
  public static func fetchPublicationsList(merchantId: Swift.String, storeCode: Swift.String, language: Swift.String, resultsCount: Swift.Int = 10, pageToken: Swift.String? = nil, completion: @escaping dvm_sdk.PublicationsListCompletion) throws
  #if compiler(>=5.3) && $AsyncAwait
  public static func fetchPublicationsList(merchantId: Swift.String, storeCode: Swift.String, language: Swift.String?, resultsCount: Swift.Int = 10, pageToken: Swift.String? = nil) async throws -> dvm_sdk.PublicationsList
  #endif
  public static func createRenderingView(publicationId: Swift.String, merchantId: Swift.String, storeCode: Swift.String, renderMode: dvm_sdk.RenderMode, language: Swift.String?, shouldPersistWebsiteDataToDisk: Swift.Bool = false) throws -> dvm_sdk.DVMRendererView
  @objc deinit
}
public struct Details : Swift.Codable {
  public let name: Swift.String?
  public let description: Swift.String?
  public let imageURL: Swift.String?
  public let additionalInfo: [Swift.String : Any]
  public let backgroundImageURL: Swift.String?
  public let backgroundColor: Swift.String?
  public let tintColor: Swift.String?
  public let additionalMedia: [dvm_sdk.Media]?
  public let ttmURL: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct PublicationsResponse : Swift.Codable {
  public let publications: [dvm_sdk.Publication]
  public let total: Swift.Int?
  public let nextToken: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Merchant : Swift.Codable {
  public let merchantItemID: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Product : Swift.Codable {
  public let globalID: Swift.String?
  public let merchantID: Swift.Int?
  public let descriptor: Swift.String?
  public let additionalIDS: dvm_sdk.ProductAdditionalIDS?
  public let metadata: dvm_sdk.ProductMetadata?
  public let categories: dvm_sdk.Categories?
  public let details: [Swift.String : dvm_sdk.Details]?
  public let productDetails: [Swift.String : dvm_sdk.ProductDetails]?
  public let contentSource: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductAdditionalIDS : Swift.Codable {
  public let sku: Swift.String?
  public let gtin: Swift.String?
  public let mpn: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductMetadata : Swift.Codable {
  public let onlineURL: Swift.String?
  public let brand: Swift.Int?
  public let brandText: Swift.String?
  public let unit: Swift.String?
  public let unitAmount: Swift.Float?
  public let ttmURL: Swift.String?
  public let averageReviewRating: Swift.Float?
  public let reviewCount: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductDetails : Swift.Codable {
  public let specs: [dvm_sdk.Spec]?
  public let media: [dvm_sdk.Media]?
  public let features: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Spec : Swift.Codable {
  public let name: Swift.String?
  public let value: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PublicationsList : Swift.Decodable {
  public let publications: [dvm_sdk.Publication]
  public init(from decoder: any Swift.Decoder) throws
}
public struct Flyer : Swift.Codable {
  public let flyerItemIDMap: [Swift.String : Swift.String]?
  public let flyerTypeID: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Metadata : Swift.Codable {
  public let ttmURL: Swift.String?
  public let externalRef: Swift.String?
  public let brands: [Swift.String]?
  public let printItemID: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DVMRendererView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var rendererDelegate: (any dvm_sdk.DVMRendererDelegate)?
  @_Concurrency.MainActor(unsafe) public func addAnnotations(type: Swift.String, ids: [Swift.String])
  @_Concurrency.MainActor(unsafe) public func removeAnnotations(type: Swift.String, ids: [Swift.String])
  @_Concurrency.MainActor(unsafe) public func scrollToItem(_ id: Swift.String)
  @_Concurrency.MainActor(unsafe) public func registerAnnotation(type: Swift.String, image: Foundation.URL, size: CoreFoundation.CGSize?, location: dvm_sdk.AnnotationLocation?)
  @_Concurrency.MainActor(unsafe) public func setVisibility(_ visibility: Swift.Bool)
  @objc deinit
}
extension dvm_sdk.DVMRendererView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
extension dvm_sdk.DVMRendererView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView)
}
public struct Categories : Swift.Codable {
  public let googleCategories: [dvm_sdk.StringList]?
  public let merchantCategories: [dvm_sdk.StringList]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StringList : Swift.Codable {
  public let data: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Integration : Swift.Codable {
  public let type: Swift.String?
  public let program: Swift.String?
  public let externalProgramID: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DVMSDKError : Foundation.LocalizedError {
  case sdkNotIntialized
  case internalNetworkError(underlyingError: any Swift.Error)
  case renderURLError(detail: Swift.String)
  case offerDetailsError(detail: Swift.String)
  case internalNetworkErrorBadRequestComponents
  case internalNetworkErrorBadBaseURL
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Media : Swift.Codable {
  public let type: dvm_sdk.MediaType?
  public let url: Swift.String?
  public let altText: Swift.String?
  public let primary: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MediaType : Swift.String, Swift.Codable {
  case unspecified
  case image
  case video
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@propertyWrapper public enum Indirect<T> {
  indirect case wrapped(T)
  public init(wrappedValue initialValue: T)
  public var wrappedValue: T {
    get
    set
  }
}
extension dvm_sdk.Indirect : Swift.Decodable where T : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension dvm_sdk.Indirect : Swift.Encodable where T : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum OfferType : Swift.String, Swift.Codable {
  case unspecified
  case buyXgetY
  case amountOff
  case percentOff
  case specifiedPrice
  case upToXOff
  case upToXPercentOff
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol DVMRendererDelegate : AnyObject {
  func didTap(result: Swift.Result<dvm_sdk.Offer, dvm_sdk.DVMSDKError>)
  func didLongTap(result: Swift.Result<dvm_sdk.Offer?, dvm_sdk.DVMSDKError>)
  func didFinishLoad(legacyMap: [Swift.String : Swift.String])
  func didFailToLoad(error: any Swift.Error)
  func publicationScrollToResponse(_ offer: dvm_sdk.Offer)
  func publicationScrollTo(flyerHeight: Swift.Int, viewportBottomOffset: Swift.Int)
  func publicationImpression(ids: [Swift.String])
  func publicationTriggeredEngagedVisit()
}
public enum RenderingType : Swift.String, Swift.Codable {
  case unspecified
  case dvm
  case sfml
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AnnotationLocation : Swift.String, Swift.Codable {
  case topRight
  case topLeft
  case bottomRight
  case bottomLeft
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OfferLegacyIDS : Swift.Codable {
  public let flyer: dvm_sdk.Flyer?
  public let ecom: dvm_sdk.Ecom?
  public let merchant: dvm_sdk.Merchant?
  public let coupon: dvm_sdk.Coupon?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RenderMode : Swift.String, Swift.Codable {
  case sfml
  case dvm
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Pricing : Swift.Codable {
  public let offerType: dvm_sdk.OfferType?
  public let price: Swift.Double?
  public let salePrice: Swift.Double?
  public let amountOff: Swift.Double?
  public let percentOff: Swift.Double?
  public let conditionType: dvm_sdk.ConditionType?
  public let purchaseMethods: [dvm_sdk.PurchaseMethod]?
  public let qualifyingQuantity: Swift.Int?
  public let rewardQuantity: Swift.Int?
  @dvm_sdk.Indirect public var qualifyingOffer: dvm_sdk.Offer? {
    get
    set
    _modify
  }
  public let salePriceRange: dvm_sdk.PriceRange?
  public let priceRange: dvm_sdk.PriceRange?
  public let loyaltyPoints: Swift.String?
  public let originalPriceEach: Swift.Bool?
  public let nforQuantity: Swift.Int?
  public let labels: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ConditionType : Swift.String, Swift.Codable {
  case unspecified
  case card
  case membership
  case coupon
  case couponAndCard
  case mailInRebate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Coupon : Swift.Codable {
  public let couponID: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Ecom : Swift.Codable {
  public let ecomItemID: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JSONCodingKeys : Swift.CodingKey {
  public var stringValue: Swift.String
  public init(stringValue: Swift.String)
  public var intValue: Swift.Int?
  public init?(intValue: Swift.Int)
}
extension Swift.KeyedDecodingContainer {
  public func decode(_ type: [Swift.String : Any].Type, forKey key: K) throws -> [Swift.String : Any]
  public func decode(_ type: [Any].Type, forKey key: K) throws -> [Any]
  public func decode(_ type: [Swift.String : Any].Type) throws -> [Swift.String : Any]
}
extension Swift.UnkeyedDecodingContainer {
  public mutating func decode(_ type: [Any].Type) throws -> [Any]
  public mutating func decode(_ type: [Swift.String : Any].Type) throws -> [Swift.String : Any]
}
extension Swift.KeyedEncodingContainerProtocol where Self.Key == dvm_sdk.JSONCodingKeys {
  public mutating func encode(_ value: [Swift.String : Any]) throws
}
extension Swift.KeyedEncodingContainerProtocol {
  public mutating func encode(_ value: [Swift.String : Any]?, forKey key: Self.Key) throws
  public mutating func encode(_ value: [Any]?, forKey key: Self.Key) throws
}
extension Swift.UnkeyedEncodingContainer {
  public mutating func encode(_ value: [Any]) throws
  public mutating func encode(_ value: [Swift.String : Any]) throws
}
public struct Dates : Swift.Codable {
  public let availableFrom: Foundation.Date?
  public let availableTo: Foundation.Date?
  public let validFrom: Foundation.Date?
  public let validTo: Foundation.Date?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferDetails : Swift.Codable {
  public let disclaimer: Swift.String?
  public let saleStory: Swift.String?
  public let prePriceText: Swift.String?
  public let postPriceText: Swift.String?
  public let keywords: [Swift.String]?
  public let unit: Swift.String?
  public let unitAmount: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DistributionContext : Swift.Codable {
  public let geo: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LegacyIDS : Swift.Codable {
  public let flyerTypeID: Swift.Int?
  public let flyerRunID: Swift.Int?
  public let flyerID: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PurchaseMethod : Swift.String, Swift.Codable {
  case unspecified
  case online
  case inStore
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Publication : Swift.Codable {
  public let globalID: Swift.String
  public let details: dvm_sdk.Details?
  public let language: Swift.String?
  public let merchantID: Swift.Int?
  public let dates: dvm_sdk.Dates?
  public let source: Swift.String?
  public let legacyIDS: dvm_sdk.LegacyIDS
  public let renderingTypes: [dvm_sdk.RenderingType]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension dvm_sdk.MediaType : Swift.Equatable {}
extension dvm_sdk.MediaType : Swift.Hashable {}
extension dvm_sdk.MediaType : Swift.RawRepresentable {}
extension dvm_sdk.OfferType : Swift.Equatable {}
extension dvm_sdk.OfferType : Swift.Hashable {}
extension dvm_sdk.OfferType : Swift.RawRepresentable {}
extension dvm_sdk.RenderingType : Swift.Equatable {}
extension dvm_sdk.RenderingType : Swift.Hashable {}
extension dvm_sdk.RenderingType : Swift.RawRepresentable {}
extension dvm_sdk.AnnotationLocation : Swift.Equatable {}
extension dvm_sdk.AnnotationLocation : Swift.Hashable {}
extension dvm_sdk.AnnotationLocation : Swift.RawRepresentable {}
extension dvm_sdk.RenderMode : Swift.Equatable {}
extension dvm_sdk.RenderMode : Swift.Hashable {}
extension dvm_sdk.RenderMode : Swift.RawRepresentable {}
extension dvm_sdk.ConditionType : Swift.Equatable {}
extension dvm_sdk.ConditionType : Swift.Hashable {}
extension dvm_sdk.ConditionType : Swift.RawRepresentable {}
extension dvm_sdk.PurchaseMethod : Swift.Equatable {}
extension dvm_sdk.PurchaseMethod : Swift.Hashable {}
extension dvm_sdk.PurchaseMethod : Swift.RawRepresentable {}
