// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name dvm_sdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CoreLocation
import Foundation
import OSLog
import Swift
import UIKit.UIDevice
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import dvm_sdk
import os
public struct Offer : Swift.Codable {
  public let globalID: Swift.String?
  public let merchantID: Swift.Int?
  public let productIDS: [Swift.String]?
  public let distributionContext: dvm_sdk.DistributionContext?
  public let dates: dvm_sdk.Dates?
  public let pricing: dvm_sdk.Pricing?
  public let categories: dvm_sdk.Categories?
  public let metadata: dvm_sdk.Metadata?
  public let offerDetails: dvm_sdk.OfferDetails?
  public let details: dvm_sdk.Offer.Details?
  public let contentSource: Swift.String?
  public let legacyIDS: dvm_sdk.Offer.LegacyIDS?
  public struct Details : Swift.Codable {
    public let name: Swift.String?, description: Swift.String?
    public let imageURL: Swift.String?
    public let additionalInfo: dvm_sdk.Offer.AdditionalInfo?
    public let additionalMedia: [dvm_sdk.Offer.Media]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct LegacyIDS : Swift.Codable {
    public let flyer: dvm_sdk.Flyer?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct AdditionalInfo : Swift.Codable {
    public let flyerRunID: Swift.Int?, flyerRunPageDiffGroupID: Swift.Int?
    public let id1: Swift.String?, id2: Swift.String?, keywords: Swift.String?
    public let pageItemID: Swift.Int?
    public let sentAt: Swift.String?, sku: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Media : Swift.Codable {
    public let type: Swift.String
    public let url: Swift.String
    public let altText: Swift.String
    public let primary: Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Categories : Swift.Codable {
  public let googleCategories: [dvm_sdk.Category]?, merchantCategories: [dvm_sdk.Category]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Category : Swift.Codable {
  public let data: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Flyer : Swift.Codable {
  public let flyerItemIDMap: [Swift.String : Swift.String]?
  public let flyerTypeID: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Metadata : Swift.Codable {
  public let ttmURL: Swift.String?
  public let externalRef: Swift.String?
  public let brands: [Swift.String]?
  public let printItemId: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferDetails : Swift.Codable {
  public let saleStory: Swift.String?, postPriceText: Swift.String?, prePriceText: Swift.String?, disclaimer: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Pricing : Swift.Codable {
  public let offerType: Swift.String?
  public let price: Swift.Double?
  public let salePrice: Swift.Double?
  public let amountOff: Swift.Double?
  public let percentOff: Swift.Double?
  public let conditionType: Swift.String?
  public let purchaseMethod: Swift.String?
  public let originalPriceEach: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DistributionContext : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias PublicationsListCompletion = (dvm_sdk.PublicationsList) -> Swift.Void
@_hasMissingDesignatedInitializers public class DVMSDK {
  public static func initialize(clientToken: Swift.String, userId: Swift.String?)
  public static func updateUserId(_ userId: Swift.String)
  public static func fetchPublicationsList(merchantId: Swift.String, storeCode: Swift.String, language: Swift.String, resultsCount: Swift.Int = 10, pageToken: Swift.String? = nil, completion: @escaping dvm_sdk.PublicationsListCompletion) throws
  #if compiler(>=5.3) && $AsyncAwait
  public static func fetchPublicationsList(merchantId: Swift.String, storeCode: Swift.String, language: Swift.String?, resultsCount: Swift.Int = 10, pageToken: Swift.String? = nil) async throws -> dvm_sdk.PublicationsList
  #endif
  public static func createRenderingView(publicationId: Swift.String, merchantId: Swift.String, storeCode: Swift.String, renderMode: dvm_sdk.RenderMode, language: Swift.String?, shouldPersistWebsiteDataToDisk: Swift.Bool = false) throws -> dvm_sdk.DVMRendererView
  @objc deinit
}
public struct PublicationsList : Swift.Decodable {
  public let publications: [dvm_sdk.Publication]
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DVMRendererView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var rendererDelegate: (any dvm_sdk.DVMRendererDelegate)?
  @objc deinit
}
extension dvm_sdk.DVMRendererView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
extension dvm_sdk.DVMRendererView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView)
}
public enum DVMSDKError : Foundation.LocalizedError {
  case sdkNotIntialized
  case internalNetworkError(underlyingError: any Swift.Error)
  case renderURLError(detail: Swift.String)
  case offerDetailsError(detail: Swift.String)
  case internalNetworkErrorBadRequestComponents
  case internalNetworkErrorBadBaseURL
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Media : Swift.Codable {
  public let type: dvm_sdk.MediaType
  public let url: Swift.Int
  public let altText: Swift.String
  public let primary: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MediaType : Swift.String, Swift.Codable {
  case unspecified
  case dvm
  case sfml
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol DVMRendererDelegate : AnyObject {
  func didTap(result: Swift.Result<dvm_sdk.Offer, dvm_sdk.DVMSDKError>)
  func didFinishLoad()
  func didFailToLoad(error: any Swift.Error)
}
public enum RenderMode : Swift.String, Swift.Codable {
  case sfml
  case dvm
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Dates : Swift.Codable {
  public let availableFrom: Foundation.Date
  public let availableTo: Foundation.Date
  public let validFrom: Foundation.Date
  public let validTo: Foundation.Date
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PublicationsResponse : Swift.Codable {
  public let publications: [dvm_sdk.Publication]
  public let total: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Publication : Swift.Codable {
  public let globalID: Swift.String
  public let merchantID: Swift.Int
  public let dates: dvm_sdk.Dates
  public let details: dvm_sdk.Details
  public let language: Swift.String, source: Swift.String
  public let renderingTypes: [dvm_sdk.RenderingType]
  public let legacyIDS: dvm_sdk.LegacyIDS
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Details : Swift.Codable {
  public let name: Swift.String?
  public let description: Swift.String?
  public let imageURL: Swift.String?
  public let additionalMedia: [dvm_sdk.Media]
  public let additionalInfo: dvm_sdk.AdditionalInfo
  public let backgroundImageURL: Swift.String?
  public let backgroundColor: Swift.String?
  public let tintColor: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdditionalInfo : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LegacyIDS : Swift.Codable {
  public let flyerTypeID: Swift.Int?
  public let flyerRunID: Swift.Int?
  public let flyerID: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RenderingType : Swift.String, Swift.Codable {
  case unspecified
  case dvm
  case sfml
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension dvm_sdk.MediaType : Swift.Equatable {}
extension dvm_sdk.MediaType : Swift.Hashable {}
extension dvm_sdk.MediaType : Swift.RawRepresentable {}
extension dvm_sdk.RenderMode : Swift.Equatable {}
extension dvm_sdk.RenderMode : Swift.Hashable {}
extension dvm_sdk.RenderMode : Swift.RawRepresentable {}
extension dvm_sdk.RenderingType : Swift.Equatable {}
extension dvm_sdk.RenderingType : Swift.Hashable {}
extension dvm_sdk.RenderingType : Swift.RawRepresentable {}
